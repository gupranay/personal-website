This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-30T14:34:09.453Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  actively-building/
    page.tsx
  projects/
    page.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  actively-page.tsx
  app-page.tsx
  projects-page.tsx
  ThemeProvider.tsx
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.eslintrc.json
.gitignore
components.json
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/actively-building/page.tsx
================
'use client'
import React from 'react'
import ActivelyBuildingPage from '@/components/actively-page'
export default function ActivelyBuilding() {
    return (
      <ActivelyBuildingPage/>
    )
  }

================
File: app/projects/page.tsx
================
'use client'
import ProjectsPage from '@/components/projects-page'
import React from 'react'

export default function Projects() {
    return (
      <ProjectsPage/>
    )
  }

================
File: app/globals.css
================
/* //app/globals.css*/ 
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;   /* white */
    --foreground: 224 71.4% 4.1%; /* dark color */
    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;
    --primary: 220.9 39.3% 11%; /* Specific blue */
    --primary-foreground: 210 20% 98%;
    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 220.9 39.3% 11%;
    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;
    --accent: 220 14.3% 95.9%;
    --accent-foreground: 220.9 39.3% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 224 71.4% 4.1%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71.4% 4.1%;   /* dark color */
    --foreground: 210 20% 98%; /* light text */
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 20% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 20% 98%;
    --primary: 1D4ED8;  /* Adjusted darker blue */
    --primary-foreground: 210 20% 98%;
    --secondary: 215 27.9% 16.9%;
    --secondary-foreground: 210 20% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 215 27.9% 16.9%;
    --accent-foreground: 210 20% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 216 12.2% 83.9%;
  }
}

@layer base {
  * {
    border: var(--border);
  }
  body {
    background-color: var(--background);
    color: var(--foreground);
  }
}

@layer base {
  @keyframes waveWipe {
    0% {
      background-position: top right;
    }
    100% {
      background-position: bottom left;
    }
  }

  .wave-transition {
    background: linear-gradient(
      45deg,
      var(--bg-start-color),
      var(--bg-end-color)
    );
    background-size: 400% 400%;
    animation: waveWipe 4s ease forwards;
  }
}

@layer base {
  @keyframes smoothColorChange {
    0% {
      filter: brightness(100%);
    }
    50% {
      filter: brightness(110%);
    }
    100% {
      filter: brightness(100%);
    }
  }

  .smooth-transition {
    animation: smoothColorChange 1s ease-in-out;
  }
}

================
File: app/layout.tsx
================
//app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/ThemeProvider";
// import { ThemeProvider } from "@/components/theme-provider";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Pranay Gupta | Software Engineer",
  description: "Pranay Gupta's personal website",
  openGraph: {
    type: "website",
    url: "http://localhost:3000/",
    title: "Pranay Gupta | Software Engineer",
    description: "Pranay Gupta's personal website",
    siteName: "Pranay Gupta",
    images: [
      {
        url: "https://media.licdn.com/dms/image/C4E16AQH4HsJhIekR2w/profile-displaybackgroundimage-shrink_350_1400/0/1644255243437?e=1729123200&v=beta&t=lSypdzeTOFt4qlayMDlMxOBwA4MAAIiO7AAzy8v9m3s",
      },
    ],
  },
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <html lang="en" suppressHydrationWarning>
        <head />
        <body>
            <ThemeProvider>
            {children}
            </ThemeProvider>
            
        </body>
      </html>
    </>
  );
}

================
File: app/page.tsx
================
'use client'
import PersonalWebsite from "@/components/app-page";
import Image from "next/image";

export default function Home() {
  return (
  <PersonalWebsite/>  
  );
}

================
File: components/actively-page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { Sun, Moon, X } from 'lucide-react';
import Image from 'next/image';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import dynamic from 'next/dynamic';
import { useTheme } from './ThemeProvider';

type Project = {
  id: string;
  title: string;
  description: string;
  image: string;
  details: string;
};

const activelyBuildingProjects: Project[] = [
  {
    id: 'project1',
    title: 'New AI Model Training',
    description: 'An AI model trained on specialized datasets.',
    image: '/placeholder.svg',
    details: 'This project involves the training of an advanced AI model...',
  },
  {
    id: 'project2',
    title: 'Mobile Health Tracker',
    description: 'A mobile application to track health metrics in real-time.',
    image: '/placeholder.svg',
    details: 'Developed with React Native, this app tracks health metrics...',
  },
  {
    id: 'project3',
    title: 'Secure Chat Platform',
    description: 'A chat platform with end-to-end encryption.',
    image: '/placeholder.svg',
    details: 'This project aims to ensure secure communications...',
  },
];

const ActivelyBuildingPage = () => {
  const { darkMode, toggleDarkMode } = useTheme();
  const [showCursor, setShowCursor] = useState(true);
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const pathname = usePathname();

  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setShowCursor((prev) => !prev);
    }, 530);
    return () => clearInterval(cursorInterval);
  }, []);

  const openProject = (project: Project) => {
    setSelectedProject(project);
    window.history.pushState(null, '', `#${project.id}`);
  };

  const closeProject = () => {
    setSelectedProject(null);
    window.history.pushState(null, '', window.location.pathname);
  };

  return (
    <div className="min-h-screen flex flex-col bg-blue-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-all duration-500 ease-in-out relative overflow-hidden">
      <div className="absolute inset-0 bg-gray-900 transform transition-transform duration-500 ease-in-out origin-left" 
           style={{ transform: darkMode ? 'scaleX(1)' : 'scaleX(0)' }}></div>
      <header className="relative z-10 bg-blue-200 dark:bg-gray-800 transition-all duration-500">
        <div className="container mx-auto px-4 py-6 flex justify-between items-center">
          <Link href="/" className="text-2xl font-bold font-mono p-2 rounded-lg transition-all duration-500 transform hover:scale-105 hover:shadow-lg hover:bg-blue-300 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-gray-400 text-gray-900 dark:text-gray-100">
            _PG / {pathname === '/' ? '' : pathname.slice(1)}
            <span className={`inline-block w-2 h-5 ml-1 bg-current ${showCursor ? 'opacity-100' : 'opacity-0'} transition-opacity duration-100`}></span>
          </Link>
          <nav className="flex items-center space-x-4">
            <Link
              href="/actively-building"
              className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-all duration-500 transform hover:scale-105 group"
            >
              <span className="relative">
                Actively Building
                <span className="absolute left-0 right-0 bottom-0 h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-500 origin-left group-hover:scale-x-100"></span>
              </span>
            </Link>
            <Link
              href="/projects"
              className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-all duration-500 transform hover:scale-105 group"
            >
              <span className="relative">
                Projects
                <span className="absolute left-0 right-0 bottom-0 h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-500 origin-left group-hover:scale-x-100"></span>
              </span>
            </Link>
            <button
              onClick={toggleDarkMode}
              className="p-2 rounded-full hover:bg-blue-300 dark:hover:bg-gray-700 transition-all duration-500"
            >
              {darkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
            </button>
          </nav>
        </div>
      </header>
      <main className="relative z-10 flex-grow container mx-auto px-4 py-12">
        <h1 className="text-4xl font-bold text-center mb-8 text-gray-900 dark:text-gray-100 transition-all duration-500">Actively Building</h1>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {activelyBuildingProjects.map((project) => (
            <div key={project.id} className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transition-transform duration-500 hover:scale-105 cursor-pointer" onClick={() => openProject(project)}>
              <Image src={project.image} alt={project.title} width={400} height={200} className="w-full h-48 object-cover" />
              <div className="p-4">
                <h2 className="text-xl font-semibold mb-2 text-gray-900 dark:text-gray-100">{project.title}</h2>
                <p className="text-gray-600 dark:text-gray-400">{project.description}</p>
              </div>
            </div>
          ))}
        </div>
      </main>
      <footer className="relative z-10 bg-blue-200 dark:bg-gray-800 transition-all duration-500">
        <div className="container mx-auto px-4 py-6">
          <p className="text-center text-sm text-gray-600 dark:text-gray-400 transition-colors duration-500">made by Pranay Gupta</p>
        </div>
      </footer>
      {selectedProject && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100">{selectedProject.title}</h2>
                <button onClick={closeProject} className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-all duration-500">
                  <X className="w-6 h-6" />
                </button>
              </div>
              <Image src={selectedProject.image} alt={selectedProject.title} width={800} height={400} className="w-full h-64 object-cover rounded-lg mb-4" />
              <p className="text-gray-700 dark:text-gray-300 mb-4">{selectedProject.description}</p>
              <p className="text-gray-600 dark:text-gray-400">{selectedProject.details}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default dynamic(() => Promise.resolve(ActivelyBuildingPage), { ssr: false });

================
File: components/app-page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { Sun, Moon, FileText, Github, Linkedin } from 'lucide-react'
import Image from 'next/image'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import dynamic from 'next/dynamic'
import { useTheme } from './ThemeProvider'

const PersonalWebsite = () => {
  const { darkMode, toggleDarkMode } = useTheme()
  const [showCursor, setShowCursor] = useState(true)
  const pathname = usePathname()

  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setShowCursor((prev) => !prev)
    }, 530)

    return () => clearInterval(cursorInterval)
  }, [])

  const currentPage = pathname
    ? pathname === '/'
      ? ''
      : pathname.slice(1)
    : ''

  return (
    <div className="min-h-screen flex flex-col bg-blue-100 dark:bg-gray-900 transition-all duration-500 ease-in-out relative overflow-hidden">
      <div
        className="absolute inset-0 bg-gray-900 transform transition-transform duration-500 ease-in-out origin-left"
        style={{ transform: darkMode ? 'scaleX(1)' : 'scaleX(0)' }}
      ></div>
      <header className="relative z-10 bg-blue-200 dark:bg-gray-800 transition-all duration-500">
        <div className="container mx-auto px-4 py-6 flex justify-between items-center">
          <Link
            href="/"
            className="text-2xl font-bold font-mono p-2 rounded-lg transition-all duration-300 ease-in-out transform hover:scale-105 hover:shadow-lg hover:bg-blue-300 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-gray-400 text-gray-900 dark:text-gray-100"
          >
             _PG / {currentPage}
            <span
              className={`inline-block w-2 h-5 ml-1 bg-current ${
                showCursor ? 'opacity-100' : 'opacity-0'
              } transition-opacity duration-100`}
            ></span>
          </Link>
          <nav className="flex items-center space-x-4">
            <Link
              href="/actively-building"
              className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-all duration-500 transform hover:scale-105 group"
            >
              <span className="relative">
                Actively Building
                <span className="absolute left-0 right-0 bottom-0 h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-300 origin-left group-hover:scale-x-100"></span>
              </span>
            </Link>
            <Link
              href="/projects"
              className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-all duration-500 transform hover:scale-105 group"
            >
              <span className="relative">
                Projects
                <span className="absolute left-0 right-0 bottom-0 h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-300 origin-left group-hover:scale-x-100"></span>
              </span>
            </Link>
            <button
              onClick={toggleDarkMode}
              className="p-2 rounded-full hover:bg-blue-300 dark:hover:bg-gray-700 transition-all duration-300"
            >
              {darkMode ? (
                <Sun className="w-5 h-5" />
              ) : (
                <Moon className="w-5 h-5" />
              )}
            </button>
          </nav>
        </div>
      </header>
      <main className="relative z-10 flex-grow container mx-auto px-4 py-12">
        <h1 className="text-5xl font-bold text-center mb-4 text-gray-900 dark:text-gray-100 transition-colors duration-500">Pranay Gupta</h1>
        <p className="text-xl text-center mb-8 text-gray-900 dark:text-gray-100 transition-colors duration-500">
          Software Engineer. Builder. Cook.
        </p>

        <div className="flex justify-center space-x-6 mb-12">
          <Link
            href="/Pranay_Gupta_Resume.pdf"
            className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-all duration-500 transform hover:scale-105 group"
          >
            <FileText className="w-5 h-5" />
            <span className="relative">
              Resume
              <span className="absolute left-0 right-0 bottom-0 h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-300 origin-left group-hover:scale-x-100"></span>
            </span>
          </Link>
          <Link
            href="https://github.com/gupranay"
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-all duration-500 transform hover:scale-105 group"
          >
            <Github className="w-5 h-5" />
            <span className="relative">
              GitHub
              <span className="absolute left-0 right-0 bottom-0 h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-300 origin-left group-hover:scale-x-100"></span>
            </span>
          </Link>
          <Link
            href="https://www.linkedin.com/in/pranay-gupta1/"
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-all duration-500 transform hover:scale-105 group"
          >
            <Linkedin className="w-5 h-5" />
            <span className="relative">
              LinkedIn
              <span className="absolute left-0 right-0 bottom-0 h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-300 origin-left group-hover:scale-x-100"></span>
            </span>
          </Link>
        </div>

        <div className="space-y-8 max-w-2xl mx-auto">
          <Link
            href="https://annarborusa.org/"
            className="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4 group transition-all duration-500 transform hover:scale-105"
          >
            <Image
              src="/spark_logo.png"
              alt="Ann Arbor Spark logo"
              width={48}
              height={48}
              className="rounded-full"
            />
            <div className="text-center sm:text-left">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 group-hover:text-gray-900 dark:group-hover:text-white transition-all duration-500">
                Ann Arbor Spark – Entrepreneurship Services Team
              </h2>
              <p className="text-gray-600 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white transition-all duration-500">
                Full Stack Software Engineering Intern
              </p>
              <span className="block w-full h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-300 origin-left group-hover:scale-x-100"></span>
            </div>
          </Link>
          <Link
            href="https://v1michigan.com/"
            className="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4 group transition-all duration-500 transform hover:scale-105"
          >
            <Image
              src="/v1_michigan_logo.jpeg"
              alt="V1 Michigan logo"
              width={48}
              height={48}
              className="rounded-full"
            />
            <div className="text-center sm:text-left">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 group-hover:text-gray-900 dark:group-hover:text-white transition-all duration-500">
                V1 Michigan - Product Studio
              </h2>
              <p className="text-gray-600 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white transition-all duration-500">
                Head of Product Studio & Recruitment
              </p>
              <span className="block w-full h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-300 origin-left group-hover:scale-x-100"></span>
            </div>
          </Link>
          <Link
            href="https://aipisolutions.com/"
            className="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4 group transition-all duration-500 transform hover:scale-105"
          >
            <Image
              src="/aipisolutions_logo.jpeg"
              alt="AiPi Solutions logo"
              width={48}
              height={48}
              className="rounded-full"
            />
            <div className="text-center sm:text-left">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 group-hover:text-gray-900 dark:group-hover:text-white transition-all duration-500">
                AiPi Solutions – Legal Infrastructure Team
              </h2>
              <p className="text-gray-600 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white transition-all duration-500">
                Software Engineering + ML Intern
              </p>
              <span className="block w-full h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-300 origin-left group-hover:scale-x-100"></span>
            </div>
          </Link>
        </div>
      </main>
      <footer className="relative z-10 bg-blue-200 dark:bg-gray-800 transition-all duration-500">
        <div className="container mx-auto px-4 py-6">
          <p className="text-center text-sm text-gray-600 dark:text-gray-400 transition-colors duration-500">
            made by Pranay Gupta
          </p>
        </div>
      </footer>
    </div>
  )
}

export default dynamic(() => Promise.resolve(PersonalWebsite), { ssr: false })

================
File: components/projects-page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { Sun, Moon, X } from 'lucide-react';
import Image from 'next/image';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import dynamic from 'next/dynamic';
import { useTheme } from './ThemeProvider';

type Project = {
  id: string;
  title: string;
  description: string;
  image: string;
  details: string;
};

const projects: Project[] = [
  {
    id: 'project1',
    title: 'AI-Powered Chat Bot',
    description: 'A machine learning chat bot built with Python and TensorFlow.',
    image: '/placeholder.svg',
    details: 'This project utilizes natural language processing...',
  },
  {
    id: 'project2',
    title: 'React Native Mobile App',
    description: 'A cross-platform mobile app for task management.',
    image: '/placeholder.svg',
    details: 'Developed using React Native for real-time sync...',
  },
  {
    id: 'project3',
    title: 'Blockchain Voting System',
    description: 'A secure and transparent voting system using blockchain.',
    image: '/placeholder.svg',
    details: 'This project implements a decentralized voting system...',
  },
];

const ProjectsPage = () => {
  const { darkMode, toggleDarkMode } = useTheme();
  const [showCursor, setShowCursor] = useState(true);
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const pathname = usePathname();

  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setShowCursor((prev) => !prev);
    }, 530);
    return () => clearInterval(cursorInterval);
  }, []);

  const openProject = (project: Project) => {
    setSelectedProject(project);
    window.history.pushState(null, '', `#${project.id}`);
  };

  const closeProject = () => {
    setSelectedProject(null);
    window.history.pushState(null, '', window.location.pathname);
  };

  return (
    <div className="min-h-screen flex flex-col bg-blue-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-all duration-500 ease-in-out relative overflow-hidden">
      <div className="absolute inset-0 bg-gray-900 transform transition-transform duration-500 ease-in-out origin-left" 
           style={{ transform: darkMode ? 'scaleX(1)' : 'scaleX(0)' }}></div>
      <header className="relative z-10 bg-blue-200 dark:bg-gray-800 transition-all duration-500">
        <div className="container mx-auto px-4 py-6 flex justify-between items-center">
          <Link href="/" className="text-2xl font-bold font-mono p-2 rounded-lg transition-all duration-500 transform hover:scale-105 hover:shadow-lg hover:bg-blue-300 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-gray-400 text-gray-900 dark:text-gray-100">
            _PG / {pathname === '/' ? '' : pathname.slice(1)}
            <span className={`inline-block w-2 h-5 ml-1 bg-current ${showCursor ? 'opacity-100' : 'opacity-0'} transition-opacity duration-100`}></span>
          </Link>
          <nav className="flex items-center space-x-4">
            <Link
              href="/actively-building"
              className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-all duration-500 transform hover:scale-105 group"
            >
              <span className="relative">
                Actively Building
                <span className="absolute left-0 right-0 bottom-0 h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-500 origin-left group-hover:scale-x-100"></span>
              </span>
            </Link>
            <Link
              href="/projects"
              className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-all duration-500 transform hover:scale-105 group"
            >
              <span className="relative">
                Projects
                <span className="absolute left-0 right-0 bottom-0 h-0.5 bg-gray-900 dark:bg-white transform scale-x-0 transition-transform duration-500 origin-left group-hover:scale-x-100"></span>
              </span>
            </Link>
            <button
              onClick={toggleDarkMode}
              className="p-2 rounded-full hover:bg-blue-300 dark:hover:bg-gray-700 transition-all duration-500"
            >
              {darkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
            </button>
          </nav>
        </div>
      </header>
      <main className="relative z-10 flex-grow container mx-auto px-4 py-12">
        <h1 className="text-4xl font-bold text-center mb-8 text-gray-900 dark:text-gray-100 transition-all duration-500">My Projects</h1>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {projects.map((project) => (
            <div key={project.id} className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transition-transform duration-500 hover:scale-105 cursor-pointer" onClick={() => openProject(project)}>
              <Image src={project.image} alt={project.title} width={400} height={200} className="w-full h-48 object-cover" />
              <div className="p-4">
                <h2 className="text-xl font-semibold mb-2 text-gray-900 dark:text-gray-100">{project.title}</h2>
                <p className="text-gray-600 dark:text-gray-400">{project.description}</p>
              </div>
            </div>
          ))}
        </div>
      </main>
      <footer className="relative z-10 bg-blue-200 dark:bg-gray-800 transition-all duration-500">
        <div className="container mx-auto px-4 py-6">
          <p className="text-center text-sm text-gray-600 dark:text-gray-400 transition-colors duration-500">made by Pranay Gupta</p>
        </div>
      </footer>
      {selectedProject && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100">{selectedProject.title}</h2>
                <button onClick={closeProject} className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-all duration-500">
                  <X className="w-6 h-6" />
                </button>
              </div>
              <Image src={selectedProject.image} alt={selectedProject.title} width={800} height={400} className="w-full h-64 object-cover rounded-lg mb-4" />
              <p className="text-gray-700 dark:text-gray-300 mb-4">{selectedProject.description}</p>
              <p className="text-gray-600 dark:text-gray-400">{selectedProject.details}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default dynamic(() => Promise.resolve(ProjectsPage), { ssr: false });

================
File: components/ThemeProvider.tsx
================
'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';

interface ThemeContextProps {
  darkMode: boolean;
  toggleDarkMode: () => void;
}

const ThemeContext = createContext<ThemeContextProps | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [darkMode, setDarkMode] = useState(false);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    const savedMode = localStorage.getItem('darkMode');
    const isDark = savedMode ? JSON.parse(savedMode) : true;
    setDarkMode(isDark);
    document.documentElement.classList.toggle('dark', isDark);
    setMounted(true);
  }, []);

  const toggleDarkMode = () => {
    setDarkMode((prevMode) => {
      const newMode = !prevMode;
      localStorage.setItem('darkMode', JSON.stringify(newMode));
      document.documentElement.classList.toggle('dark', newMode);
      return newMode;
    });
  };

  if (!mounted) return null;

  return (
    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "personal-website",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "lucide-react": "^0.454.0",
    "next": "^15.0.2",
    "react": "19.0.0-rc-69d4b800-20241021",
    "react-dom": "19.0.0-rc-69d4b800-20241021",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: 'class',
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
